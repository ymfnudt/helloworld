在GitHub上，利用Git极其强大的克隆和分支功能，广大人民群众真正可以第一次自由参与各种开源项目。GitHub还是一个开源协作社区，通过GitHub，既可以让别人参与你的开源项目，也可以参与别人的开源项目。
GitHub就是一个免费托管开源代码的远程仓库。但是对于某些视源代码如生命的商业公司来说，既不想公开源代码，又舍不得给GitHub交保护费，那就只能自己搭建一台Git服务器作为私有仓库使用。

一、安装git
Linux下：sudo apt-get install git
windows下：msysgit是Windows版的Git，从https://git-for-windows.github.io下载

$ git config --global user.name "Your Name"
$ git config --global user.email "email@example.com"

二、基本操作

1创建版本库
$git init
2把文件放入git仓库中
$git add readme.txt
3把文件提交到仓库中
$git commit -m "vesion"
4 查看结果,仓库当前状态
$git status
5 查看具体修改了什么内容
$git diff readme.txt
用git diff HEAD -- readme.txt命令可以查看工作区和版本库里面最新版本的区别
6 查找历史记录,可以显示版本commit id
$git log （--pretty=oneline）

yang@yang-PC MINGW64 /e/gitlearn (master)
$ git log
commit af9464a813d43d7df8a32c9dac68072f6339ef50
Author: yang <1520241161@qq.com>
Date:   Sun May 22 10:03:11 2016 +0800

    git tracks changes

commit 4965ec17b40f637f5ead004d41a175598549720f
Author: yang <1520241161@qq.com>
Date:   Sun May 22 09:57:54 2016 +0800

    add new file gitlearnexp.txt

commit 6d1fefa8ef676cec0baf1fe843181f483a373fb9
Author: yang <1520241161@qq.com>
Date:   Sun May 22 09:51:11 2016 +0800

    new files

7 HEAD 当前版本，HEAD^上一版本，HEAD^^上上一版本，往上100个版本 HEAD~100
8 回退到上一版本
$git reset --hard HEAD^
9 指定恢复到某个版本
$git reset --hard<commit id>
10 查看命令历史
$git reflog

11 撤回修改
命令git checkout -- readme.txt意思就是，把readme.txt文件在工作区的修改全部撤销，这里有两种情况：

一种是readme.txt自修改后还没有被放到暂存区，现在，撤销修改就回到和版本库一模一样的状态；

一种是readme.txt已经添加到暂存区后，又作了修改，现在，撤销修改就回到添加到暂存区后的状态。

总之，就是让这个文件回到最近一次git commit或git add时的状态。

用命令git reset HEAD file可以把暂存区的修改撤销掉（unstage），重新放回工作区

12 删除文件
 要从版本库中删除该文件，那就用命令git rm <file> 删掉，并且git commit
另一种情况是删错了，因为版本库里还有呢，所以可以很轻松地把误删的文件恢复到最新版本：

$ git reset HEAD test.txt
$ git checkout -- test.txt

13 创建SSH Key：

$ ssh-keygen -t rsa -C "youremail@example.com"


14 创建远程仓库 github


yang@yang-PC MINGW64 /e/gitlearn (master)
$ git remote add origin git@github.com:ymfnudt/helloworld.git

yang@yang-PC MINGW64 /e/gitlearn (master)
$ git push -u origin master
To git@github.com:ymfnudt/helloworl.git
 ! [rejected]        master -> master (fetch first)
error: failed to push some refs to 'git@github.com:ymfnudt/helloworl.git'
hint: Updates were rejected because the remote contains work that you do
hint: not have locally. This is usually caused by another repository pushing
hint: to the same ref. You may want to first integrate the remote changes
hint: (e.g., 'git pull ...') before pushing again.
hint: See the 'Note about fast-forwards' in 'git push --help' for details.

yang@yang-PC MINGW64 /e/gitlearn (master)
$ git fetch
Warning: Permanently added the RSA host key for IP address '192.30.252.129' to the list of known hosts.
warning: no common commits
remote: Counting objects: 14, done.
remote: Compressing objects: 100% (12/12), done.
remote: Total 14 (delta 1), reused 0 (delta 0), pack-reused 0
Unpacking objects: 100% (14/14), done.
From github.com:ymfnudt/helloworld
 * [new branch]      master     -> origin/master
 * [new branch]      new-branche -> origin/new-branche

yang@yang-PC MINGW64 /e/gitlearn (master)
$ git push -u origin master
Warning: Permanently added the RSA host key for IP address '192.30.252.131' to the list of known hosts.
To git@github.com:ymfnudt/helloworld.git
 ! [rejected]        master -> master (non-fast-forward)
error: failed to push some refs to 'git@github.com:ymfnudt/helloworld.git'
hint: Updates were rejected because the tip of your current branch is behind
hint: its remote counterpart. Integrate the remote changes (e.g.
hint: 'git pull ...') before pushing again.
hint: See the 'Note about fast-forwards' in 'git push --help' for details.

yang@yang-PC MINGW64 /e/gitlearn (master)
$ git pull origin master
remote: Counting objects: 6, done.
remote: Compressing objects: 100% (6/6), done.
remote: Total 6 (delta 3), reused 0 (delta 0), pack-reused 0
Unpacking objects: 100% (6/6), done.
From github.com:ymfnudt/helloworld
 * branch            master     -> FETCH_HEAD
   9811aa7..09aa89b  master     -> origin/master
Merge made by the 'recursive' strategy.
 README.md   | 1 +
 helloword.c | 9 +++++++++
 2 files changed, 10 insertions(+)
 create mode 100644 README.md
 create mode 100644 helloword.c

yang@yang-PC MINGW64 /e/gitlearn (master)
$ git push -u origin master
Counting objects: 12, done.
Delta compression using up to 2 threads.
Compressing objects: 100% (12/12), done.
Writing objects: 100% (12/12), 2.08 KiB | 0 bytes/s, done.
Total 12 (delta 3), reused 0 (delta 0)
To git@github.com:ymfnudt/helloworld.git
   09aa89b..c73a7a7  master -> master
Branch master set up to track remote branch master from origin.

15 本地更新文件 ，之后提交到远程库
yang@yang-PC MINGW64 /e/gitlearn (master)
$ git add gitorder.txt

yang@yang-PC MINGW64 /e/gitlearn (master)
$ git commit -m "update gitorder.txt"
[master 201a080] update gitorder.txt
 1 file changed, 126 insertions(+)

yang@yang-PC MINGW64 /e/gitlearn (master)
$ git push origin master
Counting objects: 3, done.
Delta compression using up to 2 threads.
Compressing objects: 100% (3/3), done.
Writing objects: 100% (3/3), 2.36 KiB | 0 bytes/s, done.
Total 3 (delta 1), reused 0 (delta 0)
To git@github.com:ymfnudt/helloworld.git
   c73a7a7..201a080  master -> master

16 从远程库拷贝到本地库

yang@yang-PC MINGW64 /e/gitlearn (master)
$ git pull origin master
From github.com:ymfnudt/helloworld
 * branch            master     -> FETCH_HEAD
Updating 6f1f48b..ddb6ebb
Fast-forward
 qicksort.c | 7 +++++++
 1 file changed, 7 insertions(+)
 create mode 100644 qicksort.c

17 克隆远程库为本地库

yang@yang-PC MINGW64 /e/gitlearn (master)
$ git clone git@github.com:ymfnudt/learngit.git
Cloning into 'learngit'...
Warning: Permanently added the RSA host key for IP address '192.30.252.123' to the list of known hosts.
remote: Counting objects: 3, done.
remote: Total 3 (delta 0), reused 0 (delta 0), pack-reused 0
Receiving objects: 100% (3/3), done.
Checking connectivity... done.

18 Git鼓励大量使用分支：

查看分支：git branch

创建分支：git branch <name>

切换分支：git checkout <name>

创建+切换分支：git checkout -b <name>

合并某分支到当前分支：git merge <name>

删除分支：git branch -d <name>

用带参数的git log也可以看到分支的合并情况：

$ git log --graph --pretty=oneline --abbrev-commit

19 Git还提供了一个stash功能，可以把当前工作现场“储藏”起来，等以后恢复现场后继续工作：

$ git stash

20 刚才的工作现场存到哪去了？用git stash list命令看看：

$ git stash list

21 工作现场还在，Git把stash内容存在某个地方了，但是需要恢复一下，有两个办法：

一是用git stash apply恢复，但是恢复后，stash内容并不删除，你需要用git stash drop来删除；

另一种方式是用git stash pop，恢复的同时把stash内容也删了

22 通常，合并分支时，如果可能，Git会用Fast forward模式，但这种模式下，删除分支后，会丢掉分支信息。

如果要强制禁用Fast forward模式，Git就会在merge时生成一个新的commit，这样，从分支历史上就可以看出分支信息

准备合并dev分支，请注意--no-ff参数，表示禁用Fast forward：

$ git merge --no-ff -m "merge with no-ff" dev

23 如果要丢弃一个没有被合并过的分支，可以通过git branch -D <name>强行删除

24 查看远程库的信息，用git remote

25 多人协作的工作模式通常是这样：

首先，可以试图用git push origin branch-name推送自己的修改；

如果推送失败，则因为远程分支比你的本地更新，需要先用git pull试图合并；

如果合并有冲突，则解决冲突，并在本地提交；

没有冲突或者解决掉冲突后，再用git push origin branch-name推送就能成功！

如果git pull提示“no tracking information”，则说明本地分支和远程分支的链接关系没有创建，用命令git branch --set-upstream branch-name origin/branch-name。

查看远程库信息，使用git remote -v；

本地新建的分支如果不推送到远程，对其他人就是不可见的；

从本地推送分支，使用git push origin branch-name，如果推送失败，先用git pull抓取远程的新提交；

在本地创建和远程分支对应的分支，使用git checkout -b branch-name origin/branch-name，本地和远程分支的名称最好一致；

建立本地分支和远程分支的关联，使用git branch --set-upstream branch-name origin/branch-name；

从远程抓取分支，使用git pull，如果有冲突，要先处理冲突。

26 标签
命令git tag <name>用于新建一个标签，默认为HEAD，也可以指定一个commit id；

git tag -a <tagname> -m "blablabla..."可以指定标签信息；

git tag -s <tagname> -m "blablabla..."可以用PGP签名标签；

命令git tag可以查看所有标签。

如果标签打错了，也可以删除：

$ git tag -d v0.1

从远程删除。删除命令也是push，但是格式如下：

$ git push origin :refs/tags/v0.1


要推送某个标签到远程，使用命令git push origin <tagname>

或者一次性推送全部尚未推送到远程的本地标签：

$ git push origin --tags

27 一个完整的.gitignore文件，内容如下：

# Windows:
Thumbs.db
ehthumbs.db
Desktop.ini

# Python:
*.py[cod]
*.so
*.egg
*.egg-info
dist
build

# My configurations:
db.ini
deploy_key_rsa

搭建Git服务器需要准备一台运行Linux的机器，强烈推荐用Ubuntu或Debian，这样，通过几条简单的apt命令就可以完成安装。

假设你已经有sudo权限的用户账号，下面，正式开始安装。

第一步，安装git：

$ sudo apt-get install git
第二步，创建一个git用户，用来运行git服务：

$ sudo adduser git
第三步，创建证书登录：

收集所有需要登录的用户的公钥，就是他们自己的id_rsa.pub文件，把所有公钥导入到/home/git/.ssh/authorized_keys文件里，一行一个。

第四步，初始化Git仓库：

先选定一个目录作为Git仓库，假定是/srv/sample.git，在/srv目录下输入命令：

$ sudo git init --bare sample.git
Git就会创建一个裸仓库，裸仓库没有工作区，因为服务器上的Git仓库纯粹是为了共享，所以不让用户直接登录到服务器上去改工作区，并且服务器上的Git仓库通常都以.git结尾。然后，把owner改为git：

$ sudo chown -R git:git sample.git
第五步，禁用shell登录：

出于安全考虑，第二步创建的git用户不允许登录shell，这可以通过编辑/etc/passwd文件完成。找到类似下面的一行：

git:x:1001:1001:,,,:/home/git:/bin/bash
改为：

git:x:1001:1001:,,,:/home/git:/usr/bin/git-shell
这样，git用户可以正常通过ssh使用git，但无法登录shell，因为我们为git用户指定的git-shell每次一登录就自动退出。

第六步，克隆远程仓库：

现在，可以通过git clone命令克隆远程仓库了，在各自的电脑上运行：

$ git clone git@server:/srv/sample.git
Cloning into 'sample'...
warning: You appear to have cloned an empty repository.
剩下的推送就简单了。

管理公钥

如果团队很小，把每个人的公钥收集起来放到服务器的/home/git/.ssh/authorized_keys文件里就是可行的。如果团队有几百号人，就没法这么玩了，这时，可以用Gitosis来管理公钥。

这里我们不介绍怎么玩Gitosis了，几百号人的团队基本都在500强了，相信找个高水平的Linux管理员问题不大。


http://www.ttmeiju.com/search.php?keyword=Game%20of%20thrones&range=1
http://pan.baidu.com/s/1dFoaPlJ
